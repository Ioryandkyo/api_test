{"name": "添加组--Description为空", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 401\n +  where 401 = <built-in method get of dict object at 0x000002257D86B598>('code')\n +    where <built-in method get of dict object at 0x000002257D86B598> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get", "trace": "self = <test_group.TestAddGroup object at 0x000002257D804B48>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D483D88>\ninit_test_sim_group = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', add_group_cases)\n    def test_add_group(self, case, init_test_sim_group):\n        allure.dynamic.title(case.title)\n        # 请求接口\n        res = init_test_sim_group.request_interface(case.url, case.method, case.data)\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n        # 是否需要查询数据库进行数据校验\n        check_sql = case.check_sql\n        if check_sql:\n            sim_card_group_id = actual_value['data']['id']\n            setattr(Parameterize, 'sim_card_group_id', sim_card_group_id)\n            sim_card_group_name = actual_value['data']['name']\n            setattr(Parameterize, 'sim_card_group_name', sim_card_group_name)\n        # 对需要进行数据校验的SQL语句进行参数化\n        check_sql = Parameterize.to_param(check_sql)\n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = eval(case.expected)\n        try:\n            assert expected_result['code'] == actual_value.get('code')\n            assert expected_result['message'] in actual_value.get('message')\n            if check_sql:\n                run_sql_result = do_mysql.run(check_sql)\n                assert run_sql_result\n            if case.flag:\n                assert eval(Parameterize.to_param(case.data)).get('keyword') in res.text\n            do_log.info(f\"{case.title}, 执行的结果为: 通过\")\n            self.add_group_sheet.write_success_result(row)\n        except AssertionError as e:\n            do_log.error(f\"{case.title}, 执行的结果为: 不通过。具体异常为: {e}\\n\")\n            self.add_group_sheet.write_fail_result(row)\n>           raise e\n\ncases\\tmx_connect\\test_group.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_group.TestAddGroup object at 0x000002257D804B48>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D483D88>\ninit_test_sim_group = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', add_group_cases)\n    def test_add_group(self, case, init_test_sim_group):\n        allure.dynamic.title(case.title)\n        # 请求接口\n        res = init_test_sim_group.request_interface(case.url, case.method, case.data)\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n        # 是否需要查询数据库进行数据校验\n        check_sql = case.check_sql\n        if check_sql:\n            sim_card_group_id = actual_value['data']['id']\n            setattr(Parameterize, 'sim_card_group_id', sim_card_group_id)\n            sim_card_group_name = actual_value['data']['name']\n            setattr(Parameterize, 'sim_card_group_name', sim_card_group_name)\n        # 对需要进行数据校验的SQL语句进行参数化\n        check_sql = Parameterize.to_param(check_sql)\n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = eval(case.expected)\n        try:\n>           assert expected_result['code'] == actual_value.get('code')\nE           AssertionError: assert 0 == 401\nE            +  where 401 = <built-in method get of dict object at 0x000002257D86B598>('code')\nE            +    where <built-in method get of dict object at 0x000002257D86B598> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get\n\ncases\\tmx_connect\\test_group.py:37: AssertionError"}, "attachments": [{"name": "log", "source": "d8fcb9a5-2e8d-4adb-b516-a4b95e4ad8e1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "<scripts.handle_excel.CaseData object at 0x000002257D483D88>"}], "start": 1671094046441, "stop": 1671094046658, "uuid": "c09b61cc-d818-4975-b794-13934c90a575", "historyId": "9b051c86c0292adbcaabc80b4772e092", "testCaseId": "7dafce9c9d7c03813b0f9518184e46e5", "fullName": "cases.tmx_connect.test_group.TestAddGroup#test_add_group", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_test_sim_group')"}, {"name": "parentSuite", "value": "cases.tmx_connect"}, {"name": "suite", "value": "test_group"}, {"name": "subSuite", "value": "TestAddGroup"}, {"name": "host", "value": "GHT-20200526SHH"}, {"name": "thread", "value": "4948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cases.tmx_connect.test_group"}]}