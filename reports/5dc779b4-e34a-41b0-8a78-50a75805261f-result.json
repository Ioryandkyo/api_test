{"name": "获取Carrier搜索框选项列表", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 401\n +  where 401 = <built-in method get of dict object at 0x000002257D766688>('code')\n +    where <built-in method get of dict object at 0x000002257D766688> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get", "trace": "self = <test_03_list.TestSimList object at 0x000002257D528AC8>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D3D5488>\ninit_login = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', cases)\n    def test_group(self, case, init_login):\n        allure.dynamic.title(case.title)\n        # 1. 请求数据参数化\n        new_data = Parameterize.to_param(case.data)\n        # 2. 拼接完整的url并进行参数化\n        new_url = c_yaml.read('api', 'prefix') + case.url\n        new_url = Parameterize.to_param(new_url)\n        # 3. 向服务器发起请求\n        res = init_login.send(url=new_url,  # url地址\n                              method=case.method,    # 请求方法\n                              data=new_data,   # 请求参数\n                              is_json=True   # 是否以json格式来传递数据, 默认为True\n                              )\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n        #\n        # # 是否需要查询数据库进行数据校验\n        # check_sql = case.check_sql\n        #\n        # # 将返回的SIM Card Group Id、Name、Description设置为Parameterize类动态属性\n        # if case.case_id == 2:\n        #     sim_card_group_id = actual_value['data']['id']\n        #     sim_card_group_name = actual_value['data']['name']\n        #     sim_card_group_description = actual_value['data']['description']\n        #     setattr(Parameterize, 'sim_card_group_id', sim_card_group_id)\n        #     setattr(Parameterize, 'sim_card_group_name', sim_card_group_name)\n        #     setattr(Parameterize, 'sim_card_group_description', sim_card_group_description)\n        # # 对需要进行数据校验的SQL语句进行参数化\n        # check_sql = Parameterize.to_param(check_sql)\n        #\n        # # 将返回的第一个SIM Card Id设置为动态属性，供后续接口使用\n        # if case.flag:\n        #     sim_list_for_group = actual_value['data']['list']\n        #     first_sim_id = sim_list_for_group[0]['id']\n        #     setattr(Parameterize, 'first_sim_id', first_sim_id)\n        #\n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = eval(case.expected)\n        msg = case.title    # 获取标题\n        success_msg = c_yaml.read('msg', 'success_result')  # 获取用例执行成功的提示\n        fail_msg = c_yaml.read('msg', 'fail_result')       # 获取用例执行失败的提示\n    \n        # 对返回的Code进行断言\n        try:\n            assert expected_result['code'] == actual_value.get('code')\n            assert expected_result['message'] in actual_value.get('message')\n            # # 根据返回的groupId查询数据库，判断组是否添加成功\n            # if check_sql:\n            #     add_group_result = do_mysql.run(check_sql)\n            #     assert add_group_result\n            do_log.info(f\"{msg}, 执行的结果为: {success_msg}\\n\")\n            self.excel.write_success_result(row)\n        except AssertionError as e:\n            do_log.error(f\"{msg}, 执行的结果为: {fail_msg}\\n具体异常为: {e}\\n\")\n            self.excel.write_fail_result(row)\n>           raise e\n\ncases\\tmx_connect\\test_03_list.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_03_list.TestSimList object at 0x000002257D528AC8>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D3D5488>\ninit_login = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', cases)\n    def test_group(self, case, init_login):\n        allure.dynamic.title(case.title)\n        # 1. 请求数据参数化\n        new_data = Parameterize.to_param(case.data)\n        # 2. 拼接完整的url并进行参数化\n        new_url = c_yaml.read('api', 'prefix') + case.url\n        new_url = Parameterize.to_param(new_url)\n        # 3. 向服务器发起请求\n        res = init_login.send(url=new_url,  # url地址\n                              method=case.method,    # 请求方法\n                              data=new_data,   # 请求参数\n                              is_json=True   # 是否以json格式来传递数据, 默认为True\n                              )\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n        #\n        # # 是否需要查询数据库进行数据校验\n        # check_sql = case.check_sql\n        #\n        # # 将返回的SIM Card Group Id、Name、Description设置为Parameterize类动态属性\n        # if case.case_id == 2:\n        #     sim_card_group_id = actual_value['data']['id']\n        #     sim_card_group_name = actual_value['data']['name']\n        #     sim_card_group_description = actual_value['data']['description']\n        #     setattr(Parameterize, 'sim_card_group_id', sim_card_group_id)\n        #     setattr(Parameterize, 'sim_card_group_name', sim_card_group_name)\n        #     setattr(Parameterize, 'sim_card_group_description', sim_card_group_description)\n        # # 对需要进行数据校验的SQL语句进行参数化\n        # check_sql = Parameterize.to_param(check_sql)\n        #\n        # # 将返回的第一个SIM Card Id设置为动态属性，供后续接口使用\n        # if case.flag:\n        #     sim_list_for_group = actual_value['data']['list']\n        #     first_sim_id = sim_list_for_group[0]['id']\n        #     setattr(Parameterize, 'first_sim_id', first_sim_id)\n        #\n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = eval(case.expected)\n        msg = case.title    # 获取标题\n        success_msg = c_yaml.read('msg', 'success_result')  # 获取用例执行成功的提示\n        fail_msg = c_yaml.read('msg', 'fail_result')       # 获取用例执行失败的提示\n    \n        # 对返回的Code进行断言\n        try:\n>           assert expected_result['code'] == actual_value.get('code')\nE           AssertionError: assert 0 == 401\nE            +  where 401 = <built-in method get of dict object at 0x000002257D766688>('code')\nE            +    where <built-in method get of dict object at 0x000002257D766688> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get\n\ncases\\tmx_connect\\test_03_list.py:64: AssertionError"}, "attachments": [{"name": "log", "source": "79bcbf8f-853d-4e7f-b67d-dc7330cc8f14-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "<scripts.handle_excel.CaseData object at 0x000002257D3D5488>"}], "start": 1671094045631, "stop": 1671094045847, "uuid": "73e927e9-cc53-4495-9e3d-139d8f23de55", "historyId": "d012716511c9d95b5d4ac24b6eba39e2", "testCaseId": "e156a341a01af7b67c6bcbe5a4f39e91", "fullName": "cases.tmx_connect.test_03_list.TestSimList#test_group", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_login')"}, {"name": "parentSuite", "value": "cases.tmx_connect"}, {"name": "suite", "value": "test_03_list"}, {"name": "subSuite", "value": "TestSimList"}, {"name": "host", "value": "GHT-20200526SHH"}, {"name": "thread", "value": "4948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cases.tmx_connect.test_03_list"}]}