{"name": "查询Home页面流量分组统计", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 401\n +  where 401 = <built-in method get of dict object at 0x000002257D5A36D8>('code')\n +    where <built-in method get of dict object at 0x000002257D5A36D8> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get", "trace": "self = <test_02_home.TestHome object at 0x000002257D5BCE08>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D3DAD08>\ninit_login = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', cases)\n    def test_group(self, case, init_login):\n        allure.dynamic.title(case.title)\n        # 1. 请求数据参数化\n        new_data = Parameterize.to_param(case.data)\n        # 2. 拼接完整的url并进行参数化\n        new_url = c_yaml.read('api', 'prefix') + case.url\n        # new_url = Parameterize.to_param(new_url)\n        # 3. 向服务器发起请求\n        res = init_login.send(url=new_url,  # url地址\n                              method=case.method,    # 请求方法\n                              data=new_data,   # 请求参数\n                              is_json=True   # 是否以json格式来传递数据, 默认为True\n                              )\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n    \n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = case.expected\n        msg = case.title    # 获取标题\n        success_msg = c_yaml.read('msg', 'success_result')  # 获取用例执行成功的提示\n        fail_msg = c_yaml.read('msg', 'fail_result')       # 获取用例执行失败的提示\n    \n        # 对返回的Code进行断言\n        try:\n            assert expected_result == actual_value.get('code')\n            do_log.info(f\"{msg}, 执行的结果为: {success_msg}\\n\")\n    \n        except AssertionError as e:\n            do_log.error(f\"{msg}, 执行的结果为: {fail_msg}\\n具体异常为: {e}\\n\")\n>           raise e\n\ncases\\tmx_connect\\test_02_home.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_02_home.TestHome object at 0x000002257D5BCE08>\ncase = <scripts.handle_excel.CaseData object at 0x000002257D3DAD08>\ninit_login = <scripts.handle_request.HandleRequest object at 0x000002256D798F08>\n\n    @pytest.mark.parametrize('case', cases)\n    def test_group(self, case, init_login):\n        allure.dynamic.title(case.title)\n        # 1. 请求数据参数化\n        new_data = Parameterize.to_param(case.data)\n        # 2. 拼接完整的url并进行参数化\n        new_url = c_yaml.read('api', 'prefix') + case.url\n        # new_url = Parameterize.to_param(new_url)\n        # 3. 向服务器发起请求\n        res = init_login.send(url=new_url,  # url地址\n                              method=case.method,    # 请求方法\n                              data=new_data,   # 请求参数\n                              is_json=True   # 是否以json格式来传递数据, 默认为True\n                              )\n        # 将相应报文中的数据转化为字典\n        actual_value = res.json()\n    \n        # 获取用例的行号\n        row = case.case_id + 1\n        # 获取预期结果\n        expected_result = case.expected\n        msg = case.title    # 获取标题\n        success_msg = c_yaml.read('msg', 'success_result')  # 获取用例执行成功的提示\n        fail_msg = c_yaml.read('msg', 'fail_result')       # 获取用例执行失败的提示\n    \n        # 对返回的Code进行断言\n        try:\n>           assert expected_result == actual_value.get('code')\nE           AssertionError: assert 0 == 401\nE            +  where 401 = <built-in method get of dict object at 0x000002257D5A36D8>('code')\nE            +    where <built-in method get of dict object at 0x000002257D5A36D8> = {'code': 401, 'data': 'https://sso.thingsmatrix.co/oauth/authorize?client_id=console&redirect_uri=http://10.10.130.222:3000/auth&response_type=code', 'message': 'Login is not authorized, please retry sign in'}.get\n\ncases\\tmx_connect\\test_02_home.py:41: AssertionError"}, "attachments": [{"name": "log", "source": "7da9076d-7b0c-4a2f-b8fc-051f48c6b34a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "<scripts.handle_excel.CaseData object at 0x000002257D3DAD08>"}], "start": 1671094044519, "stop": 1671094044721, "uuid": "a70d451a-d8ae-49b0-a1cf-424744f633cd", "historyId": "328a283e055cc5ffa111b71b5e50c9e4", "testCaseId": "4f3ba660f8648858750d3c2a61083546", "fullName": "cases.tmx_connect.test_02_home.TestHome#test_group", "labels": [{"name": "parentSuite", "value": "cases.tmx_connect"}, {"name": "suite", "value": "test_02_home"}, {"name": "subSuite", "value": "TestHome"}, {"name": "host", "value": "GHT-20200526SHH"}, {"name": "thread", "value": "4948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cases.tmx_connect.test_02_home"}]}